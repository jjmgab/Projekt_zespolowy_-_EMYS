/*
* 
*   EMYS competency manager file.
*
*
*  Author: Jan Kedzierski
*  Date:  04.04.2018
*  Ver:  7.0
*/	 
 
do(Global) {

  if (!robot.hasLocalSlot("competency")) robot.addComponent("competency");
  
   
    
  do (robot) {   
    function Stop() {call.b_RStop();};
  }; 
   
     
  do (robot.competency) {
  
    //GAMES
    function LearnColorFromLeftHand(colorName) 	{call.b_RLearnColorFromLeftHand(colorName);};
    function CheckColorFromLeftHand()		{call.b_RCheckColorFromLeftHand();};
    function LearnColorFromRightHand(colorName) {call.b_RLearnColorFromRightHand(colorName);};
    function CheckColorFromRightHand()		{call.b_RCheckColorFromRightHand();};
    function LearnColorFromTorso(colorName) 	{call.b_RLearnColorFromTorso(colorName);};
    function CheckColorFromTorso()		{call.b_RCheckColorFromTorso();};
    function ChcekKnowledgeLevel()		{call.b_RChcekKnowledgeLevel();};
    function LearnFace(name)			{call.b_RLearnFace(name);};
    function CheckFace()			{call.b_RCheckFace();};
    function SaveLearningKnowledge()		{call.b_RSaveLearningKnowledge();};
    function LoadLearningKnowledge()		{call.b_RLoadLearningKnowledge();};
	  
    //FACEBOOK
    function CheckFacebook()  			{call.b_RCheckFacebook();};
    function GetFacebookPosts()  		{call.b_RGetFacebookPosts();};
    function LikeFacebookObject(postNo)  	{call.b_RLikeFacebookObject(postNo);};
    function PostPhotoOnFacebook()  		{call.b_RPostPhotoOnFacebook();};
  
    // EMAIL
    function SendMessage(_message)  		{call.b_RSendMessage(_message);};
    function CheckMailBox()  			{call.b_RCheckMailBox();};
    function ReceiveMailBox(mailNo)  		{call.b_RReceiveMailBox(mailNo);};
    function GetUserContacts()  		{call.b_RGetUserContacts();};
    
    // NEWS, TV, WEATHER, CALENDAR
    function GetCalendarEventsForOneDay(dayNo)  {call.b_RGetCalendarEventsForOneDay(dayNo);};
    function SetEvent(_intEvent)  		{call.b_RSetEvent(_intEvent);};
    function GetWeather()  			{call.b_RGetWeather();};
    function GetTV()  				{call.b_RGetTV();};
    function GetNewsByName(news_name)  		{call.b_RGetNewsByName(news_name);};
    
    //ALARM
    function MakeAlarm() 				{call.b_RMakeAlarm();};
    function ActSetAlarm(hour_in, minute_in, event_in) 	{call.a_RSetAlarm(hour_in, minute_in, event_in);};
    
    // MUSIC
    function ActPlayRadio(URLaddress,_config) 		{call.a_RPlayRadio(URLaddress,_config);};
    function ActPlayRadioByName(name,_config) 		{call.a_RPlayRadioByName(name,_config);};
    
    // ALIVE
    function ActAlive(vision_config) 			{call.a_RAlive(vision_config);};
    function ActAroundWithEmotions() 			{call.a_RActAroundWithEmotions();};
    function ActEmotions() 				{call.a_RActEmotions();};
    function ActBackgroundReaction(vision_config) 	{call.a_RBackgroundReaction(vision_config);};
    
    // FOLLOW
    function ActFollowPerson(vision_config) 		{call.a_RFollowPerson(vision_config);};
    function ActFollowRightHand(vision_config) 		{call.a_RFollowRightHand(vision_config);};
    function ActFollowLeftHand(vision_config) 		{call.a_RFollowLeftHand(vision_config);};
    function ActFollowTorso(vision_config) 		{call.a_RFollowTorso(vision_config);};
    
    // EMOTIONS	
    function Emotion(_time) 				{call.b_REmotion(_time);};
    function BehaveHappy() 				{call.b_RBehaveHappy();};
    function BehaveSad() 				{call.b_RBehaveSad();};
    function BehaveFear() 				{call.b_RBehaveFear();};
    function BehaveDisgust() 				{call.b_RBehaveDisgust();};
    function BehaveSurprise() 				{call.b_RBehaveSurprise();};
    function BehaveAngry() 				{call.b_RBehaveAngry();};
    function BehaveNormal() 				{call.b_RBehaveNormal();};
    
    // BASIC
    function Introduce() 				{call.b_RIntroduce();};
    function IntroduceMore()				{call.b_IntroduceMore();};
    function ShowEmotions() 				{call.b_RShowEmotions();};
    function ActWakeUp()				{call.a_RWakeUp();};
    function ActGoSleep()				{call.a_RGoSleep();};
    function ActShouting(time) 				{call.a_RShouting(time);};
    
    // OTHER 
    function WaitForClickGesture(tagToPause, tagToStop, _config){call.b_RWaitForClickGesture(tagToPause, tagToStop, _config);};
    function EndWaitForClickGesture()			{call.b_REndWaitForClickGesture();};
    function WaitForSilent()				{call.b_RWaitForSilent();};
    function TakePhoto(file_name) 			{call.b_RTakePhoto(file_name);};
    function RecordVoice(file_name) 			{call.b_RRecordVoice(file_name);};
    function RecordStart(file_name) 			{call.b_RRecordStart(file_name);};
    function RecordStop(file_name) 			{call.b_RRecordStop(file_name);};
    
    //
  };
    
    

  /////////////////////////////////////////////////////////
  //	G A M E S
  /////////////////////////////////////////////////////////
  


  function  b_RLearnColorFromRightHand(colorName){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("ml")) {
      echo("ERROR: No mashine learning component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    if (!robot.ml.hasLocalSlot("colorLearning")) {
      echo("ERROR: No color learning module in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    
    if (robot.video.humanDetector.hand[right].visible)
    {
      return robot.ml.colorLearning.Learn(robot.video.humanDetector.hand[right].color.value,colorName);
    } else {
      return false;
    };
  };
   
  function  b_RCheckColorFromRightHand(){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("ml")) {
      echo("ERROR: No mashine learning component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    
    if (!robot.ml.hasLocalSlot("colorLearning")) {
      echo("ERROR: No color learning module in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    
    
    if (robot.video.humanDetector.hand[right].visible)
    {
      var ret = robot.ml.colorLearning.Check(robot.video.humanDetector.hand[right].color.value);
      return ret;
    } else {
      return "failed";
    };
  };

  function  b_RLearnColorFromLeftHand(colorName){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("ml")) {
      echo("ERROR: No mashine learning component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    if (!robot.ml.hasLocalSlot("colorLearning")) {
      echo("ERROR: No color learning module in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    
    if (robot.video.humanDetector.hand[left].visible)
    {
      return robot.ml.colorLearning.Learn(robot.video.humanDetector.hand[left].color.value,colorName);
    } else {
      return false;
    };
  };
 
  function  b_RCheckColorFromLeftHand(){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("ml")) {
      echo("ERROR: No mashine learning component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    
    if (!robot.ml.hasLocalSlot("colorLearning")) {
      echo("ERROR: No color learning module in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    
    
    if (robot.video.humanDetector.hand[left].visible)
    {
      var ret = robot.ml.colorLearning.Check(robot.video.humanDetector.hand[left].color.value);
      return ret
    } else {
      return "failed";
    };
  };
  
  
  function  b_RLearnColorFromTorso(colorName){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("ml")) {
      echo("ERROR: No mashine learning component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    if (!robot.ml.hasLocalSlot("colorLearning")) {
      echo("ERROR: No color learning module in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    
    if (robot.video.humanDetector.torso.visible)
    {
      return robot.ml.colorLearning.Learn(robot.video.humanDetector.torso.color.value,colorName);
    } else {
      return false;
    };
  };

 
  function  b_RCheckColorFromTorso(){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("ml")) {
      echo("ERROR: No mashine learning component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    
    if (!robot.ml.hasLocalSlot("colorLearning")) {
      echo("ERROR: No color learning module in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    
    
    if (robot.video.humanDetector.torso.visible)
    {
      var ret = robot.ml.colorLearning.Check(robot.video.humanDetector.torso.color.value);
      return ret; 
    } else {
      return "failed";
    };
  };
  
 
  function  b_RLearnFace(name){

    var _error = false;
    
    if (!robot.hasLocalSlot("ml")) {
      echo("ERROR: No mashine learning component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    if (!robot.ml.hasLocalSlot("faceLearning")) {
      echo("ERROR: No face learning module in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    
    g:loop{
      if (robot.video.humanDetector.head.visible)  robot.ml.faceLearning.Learn(robot.video.humanDetector.head.image, name); 
      sleep(0.02);
    },
    
    sleep(3);
    g.stop;
    return robot.ml.faceLearning.UpdateDatabase(80);
    robot.ml.faceLearning.threshold=robot.ml.faceLearning.threshold*2;
  };
  
  
  
  function  b_RCheckFace(){

    var _error = false;
    
    if (!robot.hasLocalSlot("ml")) {
      echo("ERROR: No mashine learning component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    
    if (!robot.ml.hasLocalSlot("faceLearning")) {
      echo("ERROR: No face learning module in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    
      
    if (robot.video.humanDetector.torso.visible)
    {
      return robot.ml.faceLearning.Check(robot.video.humanDetector.head.image);
    } else {
      return "failed";
    };
  };
  
  
  function  b_RSaveLearningKnowledge(){
      
    var _error = false;
    
    if (!robot.hasLocalSlot("ml")) {
      echo("ERROR: No mashine learning component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    
    if (!robot.ml.hasLocalSlot("colorLearning")) {
      echo("ERROR: No face learning module in the robot structure!");
      _error = true;
    };
    
    if (_error) return "failed";
    return robot.ml.colorLearning.Save("saved/Color_Knowledge.xml");
  };

  
  function  b_RLoadLearningKnowledge(){

      var _error = false;
      
      if (!robot.hasLocalSlot("ml")) {
	echo("ERROR: No mashine learning component in the robot structure!");
	_error = true;
      };
      
      if (_error) return "failed";
      
      if (!robot.ml.hasLocalSlot("colorLearning")) {
	echo("ERROR: No face learning module in the robot structure!");
	_error = true;
      };
      
      if (_error) return "failed";
    
    return robot.ml.colorLearning.Load("saved/Color_Knowledge.xml");
  };
  
 
  
  
  
  
  
  
  
  

  /////////////////////////////////////////////////////////
  //	F A C E B O O K
  /////////////////////////////////////////////////////////

 
  
  function b_RPostPhotoOnFacebook(){

    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("facebook")) {
      echo("ERROR: No facebook component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    return robot.network.facebook["user"].photo.PostOnTimeline(robot.dialogue.speech_sequences[370][robot.dialogue.language],"saved/photo.jpg");
  }; 
  
  
  
  function b_RLikeFacebookObject(postNo){

    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("facebook")) {
      echo("ERROR: No facebook component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    var ID = robot.network.facebook["user"].post.ID;
    
    if ((ID.size-1)<postNo) return false;
    return robot.network.facebook["user"].like.Put(ID[postNo]); 
  }; 
 
 
  
  function b_RGetFacebookPosts(){

    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("facebook")) {
      echo("ERROR: No facebook component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    return robot.network.facebook["user"].post.GetHome(); 
  }; 
  
  function b_RCheckFacebook(){

    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("facebook")) {
      echo("ERROR: No facebook component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    return (	(robot.network.facebook["user"].notification.Get()) && (robot.network.facebook["user"].message.GetUnread())  );
  }; 
  

  /////////////////////////////////////////////////////////
  //	M A I L 
  /////////////////////////////////////////////////////////

 
   
  function b_RCheckMailBox(){

    
    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("mail")) {
      echo("ERROR: No mail component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    return robot.network.mail["user"].Check();
  };
   
  function b_RReceiveMailBox(mailNo){

    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("mail")) {
      echo("ERROR: No mail component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    if (mailNo > (robot.network.mail["user"].receive.ID.size-1)) return false;
    
    return robot.network.mail["user"].Receive(robot.network.mail["user"].receive.ID[mailNo]);
  };
    
  function b_RSendMessage(_message){

    
    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("mail")) {
      echo("ERROR: No mail component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    //////////////////////////////
    
    //DATE
    var id_tmp = Date.now.asString.split(".")[0].replace(" ","-").replace(":","-");
    
    
    // FROM
    var textFrom;
    if (_message.from != "") 
      textFrom = _message.from
    else 
      textFrom = robot.dialogue.speech_sequences[0][robot.dialogue.language];
    robot.network.mail["user"].send.From(textFrom);
      
    // TO, CC, BCC
    robot.network.mail["user"].send.To(_message.to);
    robot.network.mail["user"].send.Cc([]);
    robot.network.mail["user"].send.Bcc([]);
  
    // SUBJECT
    var textSubject = robot.dialogue.speech_sequences[231][robot.dialogue.language];
    if (_message.subject != "" ) {
      textSubject = _message.subject;
      if (_message.answer) textSubject = "Re: " + _message.subject;
    };
    robot.network.mail["user"].send.Subject(textSubject);
    
    //
    // CONTENT from file
    var textContent = "";
    if ((_message.voice)&&(!_message.photo))  {
      if (robot.dialogue.language==0) textContent = robot.network.mail["user"].LoadContent("voiceEN.html");
      if (robot.dialogue.language==1) textContent = robot.network.mail["user"].LoadContent("voicePL.html");
      if (robot.dialogue.language==2) textContent = robot.network.mail["user"].LoadContent("voicePT.html");
      
      robot.network.mail["user"].send.Attachment(["saved/voice_message.mp3"]);
      robot.network.mail["user"].send.AttachmentID([]);
    };
    if ((!_message.voice)&&(_message.photo))  {
      if (robot.dialogue.language==0) textContent = robot.network.mail["user"].LoadContent("photoEN.html");
      if (robot.dialogue.language==1) textContent = robot.network.mail["user"].LoadContent("photoPL.html");
      if (robot.dialogue.language==2) textContent = robot.network.mail["user"].LoadContent("photoPT.html");
      robot.network.mail["user"].send.Attachment(["saved/photo.jpg"]);
      robot.network.mail["user"].send.AttachmentID([id_tmp]);
    };
    if ((_message.voice)&&(_message.photo))   {
      if (robot.dialogue.language==0) textContent = robot.network.mail["user"].LoadContent("bothEN.html");
      if (robot.dialogue.language==1) textContent = robot.network.mail["user"].LoadContent("bothPL.html");
      if (robot.dialogue.language==2) textContent = robot.network.mail["user"].LoadContent("bothPT.html");
      robot.network.mail["user"].send.Attachment(["saved/photo.jpg","saved/voice_message.mp3"]);
      robot.network.mail["user"].send.AttachmentID([id_tmp,"ID_AUDIO"]);
    };

    // change content ID
    textContent = textContent.replace("ID_PHOTO", id_tmp);
    textContent = textContent.replace("USER_NAME", textFrom);

    // put answer
    if (_message.answer) {
      var _tmp_cont = _message.content;
      if (_tmp_cont.split("<body").size>1) {
	_tmp_cont = _tmp_cont.split("<body")[1];
	var _tmp_sgn = _tmp_cont.split(">")[0];
	_tmp_cont = _tmp_cont.replace(_tmp_sgn,"");
	_tmp_cont = _tmp_cont[1,_tmp_cont.size];
	_tmp_cont = _tmp_cont.split("</body>")[0];
      };
      textContent = textContent.replace("ID_ANSWER",_tmp_cont);
    } else textContent = textContent.replace("ID_ANSWER", "");
    robot.network.mail["user"].send.Content(textContent);
    //
    ////////////////////////////

    // SEND
    return robot.network.mail["user"].Send();

  };
  
 

  /////////////////////////////////////////////////////////
  //	C A L E N D A R  &  C O N T A C T
  /////////////////////////////////////////////////////////

  function b_RSetEvent(_intEvent){
    robot.network.gcalendar["user"].calendar.Get;
    for(var i = 0; i < robot.network.gcalendar["user"].calendar.ID.size; i++)
      if (robot.network.gcalendar["user"].calendar.summary[i]=="Robot's Calendar")
	detach({
	  robot.network.gcalendar["user"].event.Set(robot.network.gcalendar["user"].calendar.ID[i],_intEvent.desc, robot.dialogue.speech_sequences[0][robot.dialogue.language], _intEvent.from.asString.split(".")[0],_intEvent.to.asString.split(".")[0],-1,-1,-1),
	  });
  };
  
  function b_RGetUserContacts(){
    
    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("gcontact")) {
      echo("ERROR: No gcontact component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    return robot.network.gcontact["user"].contact.GetFromGroupName(_GCalendar_Contact_GroupName);
  };
  
  
  function b_RGetCalendarEventsForOneDay(dayNo){
    
    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("gcalendar")) {
      echo("ERROR: No gcalendar component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    return robot.network.gcalendar["user"].event.GetFromCalendarName(_GCalendar_Calendar_Name,((Date.now()+dayNo*1d).asString.split(" ")[0]+" 01:00:00").asString,((Date.now()+dayNo*1d).asString.split(" ")[0]+" 23:59:59").asString);
  };
  
 

  /////////////////////////////////////////////////////////
  //	G E T   N E W S,   W E A T H E R,   T V
  /////////////////////////////////////////////////////////

  
  
  function b_RGetWeather(){
    
    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("weather")) {
      echo("ERROR: No weather component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    return robot.network.weather.Get;
  };
  
  
  function b_RGetTV(){
    
    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("news")) {
      echo("ERROR: No news component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    return robot.network.news.Get("http://www.telemagazyn.pl/rss/polecamy,krss.xml");
    //return robot.network.news.Get("http://www.teletydzien.pl/hity/filmy/feed");
  };

  
   
  function b_RGetNewsByName(news_name){
  
    var URLaddress;
    var _error = false;
    
    if (!robot.hasLocalSlot("network")) {
      echo("ERROR: No network component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
        
    if (!robot.network.hasLocalSlot("news")) {
      echo("ERROR: No news component in the robot structure!");
      _error = true;
    };
    
    if (_error) return false;
    
    switch(news_name){
      case "ALL": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/618045/index.rss";
      case "COUNTRY": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/625097/index.rss";
      case "WORLD": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/625098/index.rss";
      case "SCIENCE": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/650426/index.rss";
      case "SPORT": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/625088/index.rss";
      case "MOVIE": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/625094/index.rss";
      case "NEW_TECH": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/625109/index.rss";
      case "AUTOMOTIVE": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/625092/index.rss";
      case "TV": URLaddress = "http://www.telemagazyn.pl/rss/polecamy,krss.xml";
      case "RUMORS": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/625122/index.rss";
      case "CURIOSITIES": URLaddress = "http://interia.pl.feedsportal.com/c/34004/f/625100/index.rss";
      case "LOCAL": URLaddress = "http://www.tvn24.pl/wroclaw,44.xml";
      default: return false;
    };
    
    return robot.network.news.Get(URLaddress);
  };



  /////////////////////////////////////////////////////////
  //	G E S T U R E
  /////////////////////////////////////////////////////////



  function b_RWaitForClickGesture(tagToPause, tagToStop, _config){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "";
    
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "";
    
    if (!hasSlot("t_follow12")) var Global.t_follow12=Tag.new() else { t_follow12.unfreeze| t_follow12.stop; };
    if (!hasSlot("t_follow12A")) var Global.t_follow12A=Tag.new() else { t_follow12A.unfreeze| t_follow12A.stop; };
    if (!hasSlot("t_follow12B")) var Global.t_follow12B=Tag.new() else { t_follow12B.unfreeze| t_follow12B.stop; };
    
    t_follow12:{
      ///////////////////////////////////////////////////
      if (_config){

	// disable not used detectors
	if (robot.video.hasLocalSlot("objectDetector1")) 
	  robot.video.objectDetector1.enable=false;
	if (robot.video.hasLocalSlot("color1Detector"))  {
	  robot.video.color1Detector.enable=false;
	  robot.video.color2Detector.enable=false;
	  robot.video.color3Detector.enable=false;
	  robot.video.color4Detector.enable=false;
	};
	if (robot.video.hasLocalSlot("facetDetector")) 	
	  robot.video.facetDetector.enable=false; 	
	if (robot.video.hasLocalSlot("moveDetector")) 
	  robot.video.moveDetector.enable=false;
	  
	//robot.video.humanDetector.faceTrackingPause=true;
	robot.video.humanDetector.faceTrackingPause=false;
	
	// enable used detectors
	robot.video.humanDetector.enable=true;
	
	
      },
      ///////////////////////////////////////////////////
      // FOLLOW LEFT
      
      t_follow12A.freeze;
      t_follow12A: {
	robot.competency.ActFollowLeftHand(false),
      },
	
      at (robot.video.humanDetector.hand[left].interaction.interactive)
      {
	tagToPause.freeze;
	t_follow12A.unfreeze;
      }
      onleave
      {
	tagToPause.unfreeze;
	t_follow12A.freeze;
      },
	
   
      waituntil ((robot.video.humanDetector.hand[left].interaction.interactive)&&(robot.video.humanDetector.hand[left].interaction.pressed)&&(robot.video.humanDetector.head.oriented));
      //waituntil ((robot.video.humanDetector.hand[left].interaction.interactive)&&(robot.video.humanDetector.hand[left].interaction.pressed));
      //waituntil ((robot.video.humanDetector.hand[left].interaction.interactive)&&(robot.video.humanDetector.hand[left].interaction.press > 2));

      tagToPause.freeze;
      tagToStop.stop;
      t_follow12A.stop;
      robot.audio.musicPlayer.volume = 0 speed:150,
      robot.audio.player.volume = 0 speed:150,
      robot.audio.speech.volume = 0 speed:150,
      robot.body.neck.head.MoveBack(6,0.5)&
      robot.body.neck.head.MoveEyeClose(10,0.5) &
      robot.body.neck.head.disc[up].MoveI(0,0.5) &
      robot.body.neck.head.disc[down].MoveI(0,0.5)|
      sleep(0.2)|
      robot.audio.speech.Speak(" ")|
      robot.audio.musicPlayer.Stop&
      robot.audio.player.Stop&
      robot.body.neck.head.MoveVertical(0.7)&
      robot.body.neck.head.ExpNormal(0.7);
      robot.video.humanDetector.faceTrackingPause=false;
      robot.audio.musicPlayer.volume = _PlayerNext_MusicPlayerVolume;
      robot.audio.player.volume = _PlayerNext_PlayerVolume;
      robot.audio.speech.volume = _Speech_volume;
      tagToPause.unfreeze;
      return "done";  
    }, 
  };
  
  function b_REndWaitForClickGesture() {
      robot.video.humanDetector.faceTrackingPause=false;
  };


  /////////////////////////////////////////////////////////
  //	A L A R M
  /////////////////////////////////////////////////////////


  
   function a_RSetAlarm(hour_in, minute_in, event_in){
    
    if (!hasSlot("t_follow11")) var Global.t_follow11=Tag.new() else { t_follow11.unfreeze| t_follow11.stop; };

    if ((hour_in<0)||(minute_in<0)) return;
    
    t_follow11:{
      loop{
	if ((Date.now.hour==hour_in)&&(Date.now.minute==minute_in)){
	  event_in!;
	  echo("INFO: Alarm called.");
	  return;
	};
	sleep(1s);
      },
    }, 
  };
  
  function b_RMakeAlarm(){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("audio")) {
      echo("ERROR: No audio component in the robot structure!");
      _error = true;
    };
    
    if (_error) return "";
    
    if (!robot.audio.hasLocalSlot("player")) {
      echo("ERROR: No audio player in the robot structure!");
      _error = true;
    };
    
    if (_error) return "";
    
    if (!hasSlot("t_follow10")) var Global.t_follow10=Tag.new() else { t_follow10.unfreeze| t_follow10.stop; };
        
	
    t_follow10:{
	  loop{
	      robot.body.neck.head.BehaveNormal(1);
	      robot.audio.player.volume = 100;
	      t_tmp:{
		robot.audio.player.Play(_uFilesDir+"sounds/samples/alarm.wav"),
		a_DiscDown.stop | a_DiscDown: robot.body.neck.head.disc[down].val = (_Head_ZeroPosition[3]) sin:(0.1) ampli:3,
		a_DiscUp.stop | a_DiscUp: robot.body.neck.head.disc[up].val = (_Head_ZeroPosition[4]) sin:(0.1) ampli:3,
	      },
	      sleep(2+5.random);
	      t_tmp.stop;
	      robot.audio.player.Stop;
	      robot.audio.speech.rate=0|
	      robot.audio.speech.volume = 100|
	      {
		var tmp_Yaw = -30 + 60.random;
		var tmp_Pitch = 20.random;
		robot.dialogue.SayGetUp()&
		robot.body.neck.head.MoveAt(tmp_Yaw,tmp_Pitch,1);
	      };
	    },
    }, 
  };
  

  /////////////////////////////////////////////////////////
  //	S L E E P
  /////////////////////////////////////////////////////////


  function a_RWakeUp(){


    if (!hasSlot("t_follow13")) var Global.t_follow13=Tag.new() else { t_follow13.unfreeze| t_follow13.stop; };
    
    t_follow13:{
      robot.body.neck.head.MoveAt(0,0,2),
      robot.body.neck.head.MoveEyeClose(4,1);
      robot.body.neck.head.MoveEyeClose(10,1);
      robot.body.neck.head.MoveEyeClose(4,1);
      sleep(2+3.random);
      robot.body.neck.head.MoveEyeClose(10,1);
      robot.body.neck.head.MoveEyeClose(3,1);
      robot.body.neck.head.ActBreath(-4,5),
    };

  };

  function a_RGoSleep(){

    
    if (!hasSlot("t_follow9")) var Global.t_follow9=Tag.new() else { t_follow9.unfreeze| t_follow9.stop; };
    //if (!hasSlot("t_follow9A")) var Global.t_follow9A=Tag.new() else { t_follow9A.unfreeze| t_follow9A.stop; };
      
    t_follow9:{
      // SLEEP PROCEDURE
      var tmp=3.random;
      if (tmp==0) robot.body.neck.head.SayYawn(),
      sleep(1);
      robot.body.neck.head.MoveEyeClose(3,1);

      // random time blink
      robot.body.neck.head.MoveEyeClose(10,1);
      robot.body.neck.head.MoveEyeClose(4,1);
      tmp=1+2.random;
      sleep(tmp);

      robot.body.neck.head.MoveAt(0,-34,2)&
      robot.body.neck.head.MoveEyeClose(10,2);
      // END SLEEP PROCEDURE	
	      
      //t_follow9A:
      robot.body.neck.head.ActBreath(-4,5),	

      /*
      // wait for touch
      var load=0; 
      
      at (((load>128)) ~ 0.3s) {
	robot.body.neck.head.BehaveAngry(5,2);
	
	return;
      };
      loop { 
	t_follow9A.freeze;
	load=abs(Dyn1.GetPresentLoad(6)); 
	t_follow9A.unfreeze;
	sleep(30ms); 
      },
      */
    };

  };

  /////////////////////////////////////////////////////////
  //	P L A Y,   M U S I C,   R A D I O
  /////////////////////////////////////////////////////////

 
  function a_RPlayRadioByName(radio_name,_config){
    var URLaddress;
    switch(radio_name){
      case "RMFFM": URLaddress = "http://files.kusmierz.be/rmf/rmf.m3u";
      case "CLASSIC": URLaddress = "http://files.kusmierz.be/rmf/classic.m3u";
      case "BABY": URLaddress = "http://files.kusmierz.be/rmf/baby.m3u";
      case "CLUB": URLaddress = "http://files.kusmierz.be/rmf/club.m3u";
      case "FLAMENCO": URLaddress = "http://files.kusmierz.be/rmf/flamenco.m3u";
      case "CHILLOUT": URLaddress = "http://files.kusmierz.be/rmf/chillout.m3u";
      case "ROCK": URLaddress = "http://files.kusmierz.be/rmf/rock.m3u";
      case "REGGAE": URLaddress = "http://files.kusmierz.be/rmf/reggae.m3u";
      case "DUBSTEP": URLaddress = "http://files.kusmierz.be/rmf/dubstep.m3u";
      case "RELAX": URLaddress = "http://files.kusmierz.be/rmf/relaks.m3u";
      case "WORK": URLaddress = "http://files.kusmierz.be/rmf/wpracy.m3u";
      default: return 0;
    };///////
      
    robot.competency.ActPlayRadio(URLaddress,_config);
  };


  function a_RPlayRadio(URLaddress,_config){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("audio")) {
      echo("ERROR: No audio component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!robot.audio.hasLocalSlot("musicPlayer")) {
      echo("ERROR: No audio music player in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!hasSlot("t_follow8")) var Global.t_follow8=Tag.new() else { t_follow8.unfreeze| t_follow8.stop; };
    if (!hasSlot("t_follow8A")) var Global.t_follow8A=Tag.new() else { t_follow8A.unfreeze| t_follow8A.stop; };
    if (!hasSlot("t_follow8B")) var Global.t_follow8B=Tag.new() else { t_follow8B.unfreeze| t_follow8B.stop; };
    if (!hasSlot("t_follow8C")) var Global.t_follow8C=Tag.new() else { t_follow8C.unfreeze| t_follow8C.stop; };
    
    t_follow8:{
      ///////////////////////////////////////////////////
      if (_config){

	// disable not used detectors
	if (robot.video.hasLocalSlot("objectDetector1")) 
	  robot.video.objectDetector1.enable=false;
	if (robot.video.hasLocalSlot("color1Detector"))  {
	  robot.video.color1Detector.enable=false;
	  robot.video.color2Detector.enable=false;
	  robot.video.color3Detector.enable=false;
	  robot.video.color4Detector.enable=false;
	};
	if (robot.video.hasLocalSlot("facetDetector")) 	
	  robot.video.facetDetector.enable=false; 	
	if (robot.video.hasLocalSlot("moveDetector")) 
	  robot.video.moveDetector.enable=false;
	  
	//robot.video.humanDetector.faceTrackingPause=true;
	robot.video.humanDetector.faceTrackingPause=false;
	
	// enable used detectors
	robot.video.humanDetector.enable=true;
	
	
      },
      ////////////////////////////////////////////
    
      robot.audio.musicPlayer.volume = 30;
      var ret = 1;
      ret =  robot.audio.musicPlayer.Play(URLaddress),
      if (ret==0) return;
	
      t_follow8A: {
	robot.body.neck.head.MoveEyeClose(0,0.5);
	robot.body.neck.head.ActAlive(6,3,3,7,3,30,1),
      
	var _d_step = 0;
	var _d_bpm = 0;	
	var _d_time = 0;
	var _d_inten = 0;
	//_d_inten = _d_inten*0.6;
	loop{
	 // detach({
	    _d_time  = (201-robot.audio.musicPlayer.volume)/100;
	    _d_inten = (15+robot.audio.musicPlayer.volume)*0.086;
	    var _d_tmp = (_d_inten.round).random;
	    if (_d_step==0) {
	      robot.body.neck.head.MoveForward(_d_inten,_d_time)& 
	      robot.body.neck.head.MoveLeft(_d_tmp,_d_time),
	    },
	    if (_d_step==1) {
	      robot.body.neck.head.MoveBack(_d_inten,_d_time) &   
	      robot.body.neck.head.MoveRight(0,_d_time),
	    },
	    if (_d_step==2) {
	      robot.body.neck.head.MoveForward(_d_inten,_d_time)& 
	      robot.body.neck.head.MoveRight(_d_tmp,_d_time),
	    },
	    if (_d_step==3) {
	      robot.body.neck.head.MoveBack(_d_inten,_d_time)&  
	      robot.body.neck.head.MoveRight(0,_d_time),
	    },
	  //  }),
	  _d_step=_d_step+1;
	  if (_d_step>3) _d_step=0;
	//  sleep(200ms);
	  _d_bpm = robot.audio.musicPlayer.bpmPosition;
	  while (_d_bpm == robot.audio.musicPlayer.bpmPosition) {sleep(20ms);};
	//  echo(robot.audio.musicPlayer.bpmPosition);
	},
      },
  	
      t_follow8B.freeze;
      t_follow8B: {
	robot.competency.ActFollowRightHand(false),
      },
      
      t_follow8C.freeze; 
      t_follow8C: { 
	loop{
	  var tmp = (robot.video.humanDetector.hand[right].interaction.y + 0.6)*70;
	  if (tmp<0) tmp = 0;
	  if (tmp>100) tmp = 100;
	  robot.audio.musicPlayer.volume = tmp;
	  robot.body.neck.head.MoveEyeClose(4-tmp/25,0.05) &  // 0.1
	  robot.body.neck.head.disc[up].MoveI(tmp/10,0.05) &
	  robot.body.neck.head.disc[down].MoveI(tmp/10,0.05);
	},  
      },

      // FOLLOW RIGHT
      at (robot.video.humanDetector.hand[right].interaction.interactive)
      {
	t_follow8A.freeze;
	t_follow8B.unfreeze;
      }
      onleave
      {
	t_follow8B.freeze;
	t_follow8A.unfreeze;
      },
	
      // VOLUME
      at ((robot.video.humanDetector.hand[right].interaction.interactive)&&(robot.video.humanDetector.hand[right].interaction.event==1))
      {
	t_follow8C.unfreeze;
      }
      onleave
      {
	t_follow8C.freeze;
	robot.body.neck.head.MoveEyeClose(0,1) &
	robot.body.neck.head.disc[up].MoveI(4,1)&
	robot.body.neck.head.disc[down].MoveI(3,1);
      },
	
    }, 
  };
  

  /////////////////////////////////////////////////////////
  //	F O L L O W
  /////////////////////////////////////////////////////////
   
  
  
  function a_RAlive(_config){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("audio")) {
      echo("ERROR: No audio component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!robot.audio.hasLocalSlot("detector")) {
      echo("ERROR: No audio detector component in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("moveDetector")) {
      echo("ERROR: No video move detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!hasSlot("t_follow7")) var Global.t_follow7=Tag.new() else { t_follow7.unfreeze| t_follow7.stop; };
    if (!hasSlot("t_follow7A")) var Global.t_follow7A=Tag.new() else { t_follow7A.unfreeze| t_follow7A.stop; };
    if (!hasSlot("t_follow7B")) var Global.t_follow7B=Tag.new() else { t_follow7B.unfreeze| t_follow7B.stop; };
    if (!hasSlot("t_follow7C")) var Global.t_follow7C=Tag.new() else { t_follow7C.unfreeze| t_follow7C.stop; };
    
    t_follow7:{
      ///////////////////////////////////////////////////
      if (_config){

	// disable not used detectors
	if (robot.video.hasLocalSlot("objectDetector1")) 
	  robot.video.objectDetector1.enable=false;
	if (robot.video.hasLocalSlot("color1Detector"))  {
	  robot.video.color1Detector.enable=false;
	  robot.video.color2Detector.enable=false;
	  robot.video.color3Detector.enable=false;
	  robot.video.color4Detector.enable=false;
	};
	if (robot.video.hasLocalSlot("facetDetector")) 	
	  robot.video.facetDetector.enable=false; 	
	
	// enable used detectors
	robot.video.moveDetector.enable=true;
	robot.video.humanDetector.enable=true;
	robot.video.humanDetector.faceTrackingPause=false;
	
      },
      ///////////////////////////////////////////////////
    
      if (robot.hasLocalSlot("emotion"))  {
	robot.competency.ActEmotions(),
      } else {
	robot.body.neck.head.ExpNormal(1);
	robot.body.neck.head.ActBlinking(100,2),
	robot.body.neck.head.ActBreath(8,3),
      },
      
      t_follow7A: {  
	robot.competency.ActFollowPerson(false),
	at (robot.video.humanDetector.visible~1) 
	{
	  t_follow7B.freeze;
	  t_follow7C.freeze;
	  if (robot.video.hasLocalSlot("moveDetector")) robot.video.moveDetector.enable=false;
	},
	at (!robot.video.humanDetector.visible~1) 
	{
	  if (robot.video.hasLocalSlot("moveDetector")) robot.video.moveDetector.enable=true;
	  t_follow7B.unfreeze;
	};
      },
      
      t_follow7B: {
	robot.competency.ActBackgroundReaction(false),
	
	at (((robot.video.moveDetector.visible)||(robot.audio.detector.sourceConfidence>0.5))) 
	{
	  t_follow7C.freeze;	
	},
	
	at (((!robot.video.moveDetector.visible)&&(!(robot.audio.detector.sourceConfidence>0.5)))~1) 
	{
	  t_follow7C.unfreeze;
	};
	
      },
      
      t_follow7C: {
	if (robot.hasLocalSlot("emotion"))  {
	  robot.competency.ActAroundWithEmotions(),
	} else {
	  robot.body.neck.head.ActAround(6,5,3),
	},
      },
    }, // t_follow6:
  };
  
 
  function a_RActAroundWithEmotions(){
    
    var _error = false;
    if (!robot.hasLocalSlot("emotion")) {
      echo("ERROR: No emotion component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    var _e_tmp = ["",0];
    var _e_tag = Tag.new();
    
    _e_tag.stop;
    _e_tag:loop {
      if (_e_tmp != robot.emotion.Get()) {
	_e_tmp = robot.emotion.Get();
	
	detach({ ///////////
	
	switch (_e_tmp[0])
	{
	  case "happy": {
	    robot.body.neck.head.ActAround(6,5 -_e_tmp[1]*0.33,1),
	  },
	  case "content": {
	    robot.body.neck.head.ActAround(6,5 -_e_tmp[1]*0.33,1),
	  },
	  case "sad": {	
	    robot.body.neck.head.ActAround(6,5+_e_tmp[1],2),    
	  },
	  case "depressed": { // same as sad  
	    robot.body.neck.head.ActAround(6,5+_e_tmp[1],2),
	  },
	  case "fear": {
	    robot.body.neck.head.ActAround(3,5-_e_tmp[1],1),
	  },
	  case "fearful": { // same as fear
	    robot.body.neck.head.ActAround(3,5-_e_tmp[1],1),
	  },
	  case "bored": {
	    robot.body.neck.head.ActAround(10,5+_e_tmp[1],0),
	  },
	  case "annoyed": {  // same as bored
	    robot.body.neck.head.ActAround(10,5+_e_tmp[1],0),
	  },
	  case "surprise": {
	    robot.body.neck.head.ActAround(2,5-_e_tmp[1],2),
	  },
	  case "surprised": { // same as surprise
	    robot.body.neck.head.ActAround(2,5-_e_tmp[1],2),
	  },
	  case "angry": {
	    robot.body.neck.head.ActAround(3,5-_e_tmp[1]*0.33,2),
	  },
	  case "neutral": {
	    robot.body.neck.head.ActAround(6,5,2),
	  },
	  case "concentrated": { // same as neutral
	    robot.body.neck.head.ActAround(6,5,2),
	  },
	},
	
	}), // detach
      
      } else {
	sleep(30ms);
      };
    },
  };
   
  
  function a_RActEmotions(){
    
    var _error = false;
    if (!robot.hasLocalSlot("emotion")) {
      echo("ERROR: No emotion component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    var _e_tmp = ["",0];
    var _e_tag = Tag.new();
    
    loop {
      if (_e_tmp != robot.emotion.Get()) {
	_e_tmp = robot.emotion.Get();
	//echo("EMOTION: " + _e_tmp[0] + " "+_e_tmp[1].asString);
	_e_tag.stop;
	_e_tag:detach({ ///////////
	
	switch (_e_tmp[0])
	{
	  ////////////////////////////////////////////////////////////////
	  // primary emotions
	  //
	  case "happy": {
	    robot.body.neck.head.ExpSmile(_e_tmp[1]*3,0.5);
	    robot.dialogue.SetEmotion("happy", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(50-10*_e_tmp[1],2),
	    robot.body.neck.head.ActBreath(-8,3-_e_tmp[1]*0.33),
	  },
	  case "content": {
	    robot.body.neck.head.ExpSmile(_e_tmp[1]*3,0.5);
	    robot.dialogue.SetEmotion("happy", _e_tmp[1]*3),
	    robot.body.neck.head.ActBlinking(50-10*_e_tmp[1],2),
	    robot.body.neck.head.ActBreath(-8,3-_e_tmp[1]*0.33),
	  },
	  case "sad": {	    
	    robot.body.neck.head.ExpSad(_e_tmp[1]*3,0.8);
	    robot.dialogue.SetEmotion("sad", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(20,2+_e_tmp[1]),
	    robot.body.neck.head.ActBreath(-5,2+_e_tmp[1]*0.33),
	  },
	  case "depressed": { // same as sad  
	    robot.body.neck.head.ExpSad(_e_tmp[1]*3,0.8);
	    robot.dialogue.SetEmotion("sad", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(20,2+_e_tmp[1]),
	    robot.body.neck.head.ActBreath(-5,2+_e_tmp[1]*0.33),
	  },
	  case "fear": {
	    robot.body.neck.head.ExpFear(_e_tmp[1]*3,0.4);
	    robot.dialogue.SetEmotion("fear", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(10,2-_e_tmp[1]*0.33),
	    robot.body.neck.head.ActBreath(10,1+3-_e_tmp[1]),
	  },
	  case "fearful": { // same as fear
	    robot.body.neck.head.ExpFear(_e_tmp[1]*3,0.4);
	    robot.dialogue.SetEmotion("fear", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(10,2-_e_tmp[1]*0.33),
	    robot.body.neck.head.ActBreath(10,1.5+3-_e_tmp[1]),
	  },
	  case "bored": {
	    robot.body.neck.head.ExpDisgust(_e_tmp[1]*3,0.8);
	    robot.dialogue.SetEmotion("disgust", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(20,2+_e_tmp[1]),
	    robot.body.neck.head.ActBreath(-5,2+_e_tmp[1]*0.5),
	  },
	  case "annoyed": {  // same as bored
	    robot.body.neck.head.ExpDisgust(_e_tmp[1]*3,0.8);
	    robot.dialogue.SetEmotion("disgust", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(20,2+_e_tmp[1]),
	    robot.body.neck.head.ActBreath(-5,2+_e_tmp[1]*0.5),
	  },
	  case "surprise": {
	    robot.body.neck.head.ExpSurprise(_e_tmp[1]*2,0.3);
	    robot.dialogue.SetEmotion("surprise", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(10,2-_e_tmp[1]*0.33),
	    //robot.body.neck.head.ActBreath(-5,2+_e_tmp[1]*0.5),
	  },
	  case "surprised": { // same as surprise
	    robot.body.neck.head.ExpSurprise(_e_tmp[1]*2,0.3);
	    robot.dialogue.SetEmotion("surprise", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(10,2-_e_tmp[1]*0.33),
	    //robot.body.neck.head.ActBreath(-5,2+_e_tmp[1]*0.5),
	  },
	  case "angry": {
	    robot.body.neck.head.ExpAngry(_e_tmp[1]*3,0.5);
	    robot.dialogue.SetEmotion("angry", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(10,2-_e_tmp[1]*0.33),
	    robot.body.neck.head.ActBreath(-10,1.5+3-_e_tmp[1]),
	  },
	  case "neutral": {
	    robot.body.neck.head.ExpNormal(0.5);
	    robot.dialogue.SetEmotion("neutral", 0),
	    robot.body.neck.head.ActBlinking(100,2),
	    robot.body.neck.head.ActBreath(8,3),
	  },
	  case "concentrated": { // same as neutral
	    robot.body.neck.head.ExpNormal(0.5);
	    robot.dialogue.SetEmotion("neutral", 0),
	    robot.body.neck.head.ActBlinking(100,2),
	    robot.body.neck.head.ActBreath(8,3),
	  },
	  //////////////////////////////////////////////////////////
	  // secondary emotions
	  //
	  case "HOPE": { 
	    robot.body.neck.head.ExpSmile(5,0.8);
	    robot.dialogue.SetEmotion("surprise", _e_tmp[1]*3.3),
	    robot.body.neck.head.ActBlinking(10,2-_e_tmp[1]*0.33),
	    //robot.body.neck.head.ActBreath(-5,2+_e_tmp[1]*0.5),
	  },
	},
	
	}), // detach
      
      } else {
	sleep(30ms);
      };
    },
  };
  
 
  
  function a_RBackgroundReaction(_config){
    
  
    var _error = false;
    
    if (!robot.hasLocalSlot("audio")) {
      echo("ERROR: No audio component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!robot.audio.hasLocalSlot("detector")) {
      echo("ERROR: No audio detector component in the robot structure!");
      _error = true;
    };
        
    if (!robot.video.hasLocalSlot("moveDetector")) {
      echo("ERROR: No video move detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!hasSlot("t_follow6")) var Global.t_follow6=Tag.new() else { t_follow6.unfreeze| t_follow6.stop; };
    
    t_follow6:{
      ///////////////////////////////////////////////////
      if (_config){

	// disable not used detectors
	if (robot.video.hasLocalSlot("objectDetector1")) 
	  robot.video.objectDetector1.enable=false;
	if (robot.video.hasLocalSlot("color1Detector"))  {
	  robot.video.color1Detector.enable=false;
	  robot.video.color2Detector.enable=false;
	  robot.video.color3Detector.enable=false;
	  robot.video.color4Detector.enable=false;
	};
	if (robot.video.hasLocalSlot("facetDetector")) 	
	  robot.video.facetDetector.enable=false;
	robot.video.humanDetector.enable=false;
	robot.video.humanDetector.faceTrackingPause=true;
	
	// enable used detectors
	if (robot.video.hasLocalSlot("moveDetector")) 	
	  robot.video.moveDetector.enable=true;
      },
      ///////////////////////////////////////////////////
	loop {
	  if (robot.video.hasLocalSlot("moveDetector")&&(robot.video.moveDetector.visible)) {
	    var tmp_Yaw   = robot.video.moveDetector.x*robot.video.moveDetector.scale/11 + _Kinect_Offset[3] |
	    var tmp_Pitch = robot.video.moveDetector.y*robot.video.moveDetector.scale/11 + _Kinect_Offset[4] |
	    
	    if (robot.hasLocalSlot("emotion"))  {
	      robot.body.neck.head.MoveAtSpeed(tmp_Yaw,tmp_Pitch-10,40+robot.emotion.movingSpeed*2);
	    } else {
	      robot.body.neck.head.MoveAtSpeed(tmp_Yaw,tmp_Pitch-10,50);
	    },
	    
	  } else if (robot.audio.hasLocalSlot("detector")&&(robot.audio.detector.sourceConfidence>0.5)) {
	    var tmp_Pitch = 5.random|
	    var tmp_Yaw   = robot.audio.detector.sourceAngle + _Kinect_Offset[3] |
	    
	    	    
	    if (robot.hasLocalSlot("emotion"))  {
	      robot.body.neck.head.MoveAt(tmp_Yaw,tmp_Pitch,1.0-robot.emotion.movingSpeed/20);
	    } else {
	      robot.body.neck.head.MoveAt(tmp_Yaw,tmp_Pitch,1);
	    },
	    
	    sleep(1);
	  };
	  sleep(30ms);
	},
      ///////////////////////////////////////////////////
    }, // t_follow6:
  };
  
  
  function a_RFollowPerson(_config){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!hasSlot("t_follow5")) var Global.t_follow5=Tag.new() else { t_follow5.unfreeze| t_follow5.stop; };
    
    t_follow5:{
      ///////////////////////////////////////////////////
      if (_config){

	// disable not used detectors
	if (robot.video.hasLocalSlot("objectDetector1")) 
	  robot.video.objectDetector1.enable=false;
	if (robot.video.hasLocalSlot("color1Detector"))  {
	  robot.video.color1Detector.enable=false;
	  robot.video.color2Detector.enable=false;
	  robot.video.color3Detector.enable=false;
	  robot.video.color4Detector.enable=false;
	};
	if (robot.video.hasLocalSlot("facetDetector")) 	
	  robot.video.facetDetector.enable=false;
	if (robot.video.hasLocalSlot("moveDetector")) 	
	  robot.video.moveDetector.enable=false;
	
	// enable used detectors
	robot.video.humanDetector.enable=true;
	robot.video.humanDetector.faceTrackingPause=false;
      },
      ///////////////////////////////////////////////////
      loop {
	if (robot.video.humanDetector.head.visible) {
	  if (robot.hasLocalSlot("emotion"))  {
	    robot.body.neck.head.MoveAtSpeed(robot.video.humanDetector.head.orientation[0],robot.video.humanDetector.head.orientation[1]-4,40+robot.emotion.movingSpeed*2),
	    //robot.body.neck.head.MoveAt(robot.video.humanDetector.head.orientation[0],robot.video.humanDetector.head.orientation[1]-5,0.5),
	  } else {
	    robot.body.neck.head.MoveAtSpeed(robot.video.humanDetector.head.orientation[0],robot.video.humanDetector.head.orientation[1]-4,55),
	    //robot.body.neck.head.MoveAt(robot.video.humanDetector.head.orientation[0],robot.video.humanDetector.head.orientation[1]-5,0.5),
	  },
	},
	sleep(30ms);
	//sleep(500ms);
      },
      /////////////////////////////////////////////////// 
    }, // t_follow:
  };
  
 
  function a_RFollowRightHand(_config){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!hasSlot("t_follow3")) var Global.t_follow3=Tag.new() else { t_follow3.unfreeze| t_follow3.stop; };
    
    t_follow3:{
      ///////////////////////////////////////////////////
      if (_config){

	// disable not used detectors
	if (robot.video.hasLocalSlot("objectDetector1")) 
	  robot.video.objectDetector1.enable=false;
	if (robot.video.hasLocalSlot("color1Detector"))  {
	  robot.video.color1Detector.enable=false;
	  robot.video.color2Detector.enable=false;
	  robot.video.color3Detector.enable=false;
	  robot.video.color4Detector.enable=false;
	};
	if (robot.video.hasLocalSlot("facetDetector")) 	
	  robot.video.facetDetector.enable=false;
	if (robot.video.hasLocalSlot("moveDetector")) 	
	  robot.video.moveDetector.enable=false;
	
	robot.video.humanDetector.faceTrackingPause=true;
	
	// enable used detectors
	robot.video.humanDetector.enable=true;
      },
      ///////////////////////////////////////////////////
     // robot.body.neck.head.ExpAngry(5,0.5),
      loop {
	if (robot.video.humanDetector.hand[right].visible) {
	  if (robot.hasLocalSlot("emotion"))  {
	    robot.body.neck.head.MoveAtSpeed(robot.video.humanDetector.hand[right].orientation[0],robot.video.humanDetector.hand[right].orientation[1],40+robot.emotion.movingSpeed*2),
	  } else {
	    robot.body.neck.head.MoveAtSpeed(robot.video.humanDetector.hand[right].orientation[0],robot.video.humanDetector.hand[right].orientation[1],40),
	  },
	},
	sleep(30ms);
      },
      /////////////////////////////////////////////////// 
    }, // t_follow:
  }; 
  
     
 
  function a_RFollowLeftHand(_config){
  
    var _error = false;
    
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!hasSlot("t_follow2")) var Global.t_follow2=Tag.new() else { t_follow2.unfreeze| t_follow2.stop; };
    
    t_follow2:{
      ///////////////////////////////////////////////////
      if (_config){

	// disable not used detectors
	if (robot.video.hasLocalSlot("objectDetector1")) 
	  robot.video.objectDetector1.enable=false;
	if (robot.video.hasLocalSlot("color1Detector"))  {
	  robot.video.color1Detector.enable=false;
	  robot.video.color2Detector.enable=false;
	  robot.video.color3Detector.enable=false;
	  robot.video.color4Detector.enable=false;
	};
	if (robot.video.hasLocalSlot("facetDetector")) 	
	  robot.video.facetDetector.enable=false;
	if (robot.video.hasLocalSlot("moveDetector")) 	
	  robot.video.moveDetector.enable=false;
	
	robot.video.humanDetector.faceTrackingPause=true;
	
	// enable used detectors
	robot.video.humanDetector.enable=true;

      },
      ///////////////////////////////////////////////////
      //robot.body.neck.head.ExpAngry(5,0.5),
      loop {
	if (robot.video.humanDetector.hand[left].visible) {
	  if (robot.hasLocalSlot("emotion"))  {
	    robot.body.neck.head.MoveAtSpeed(robot.video.humanDetector.hand[left].orientation[0],robot.video.humanDetector.hand[left].orientation[1],40+robot.emotion.movingSpeed*2),
	  } else {
	    robot.body.neck.head.MoveAtSpeed(robot.video.humanDetector.hand[left].orientation[0],robot.video.humanDetector.hand[left].orientation[1],40),
	  },
	},
	sleep(30ms);
      },
      /////////////////////////////////////////////////// 
    }, // t_follow:
  }; 
  
    
    
 
  function a_RFollowTorso(_config){

    var _error = false;
    
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
        
    if (!robot.video.hasLocalSlot("humanDetector")) {
      echo("ERROR: No video human detector component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!hasSlot("t_follow1")) var Global.t_follow1=Tag.new() else { t_follow1.unfreeze| t_follow1.stop; };
    
    t_follow1:{
      
      ///////////////////////////////////////////////////
      if (_config){
	// disable not used detectors
	if (robot.video.hasLocalSlot("objectDetector1")) 
	  robot.video.objectDetector1.enable=false;
	if (robot.video.hasLocalSlot("color1Detector"))  {
	  robot.video.color1Detector.enable=false;
	  robot.video.color2Detector.enable=false;
	  robot.video.color3Detector.enable=false;
	  robot.video.color4Detector.enable=false;
	};
	if (robot.video.hasLocalSlot("facetDetector")) 	
	  robot.video.facetDetector.enable=false;
	if (robot.video.hasLocalSlot("moveDetector")) 	
	  robot.video.moveDetector.enable=false;
	
	robot.video.humanDetector.faceTrackingPause=true;
	
	// enable used detectors
	robot.video.humanDetector.enable=true;

      },
      ///////////////////////////////////////////////////
      //robot.body.neck.head.ExpAngry(5,0.5),
      loop {
	if (robot.video.humanDetector.torso.visible) {
	  if (robot.hasLocalSlot("emotion"))  {
	    robot.body.neck.head.MoveAtSpeed(robot.video.humanDetector.torso.orientation[0],robot.video.humanDetector.torso.orientation[1],40+robot.emotion.movingSpeed*2),
	  } else {
	    robot.body.neck.head.MoveAtSpeed(robot.video.humanDetector.torso.orientation[0],robot.video.humanDetector.torso.orientation[1],40),
	  },
	},
	sleep(30ms);
      },
      /////////////////////////////////////////////////// 
    }, // t_follow:
  }; 
  
  
  ///////////////////////////////////////////
  //	E M O T I O N S
  ///////////////////////////////////////////
  
   function b_REmotion(_time){
    
    var _error = false;
    if (!robot.hasLocalSlot("emotion")) {
      echo("ERROR: No emotion component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    var _e_tmp = robot.emotion.Get();

	switch (_e_tmp[0])
	{
	  case "happy": {
	    robot.body.neck.head.ExpSmile(_e_tmp[1]*3,_time);
	  };
	  case "content": {
	    robot.body.neck.head.ExpSmile(_e_tmp[1]*3,_time);
	  };
	  case "sad": {	    
	    robot.body.neck.head.ExpSad(_e_tmp[1]*3,_time);
	  };
	  case "depressed": { // same as sad  
	    robot.body.neck.head.ExpSad(_e_tmp[1]*3,_time);
	  };
	  case "fear": {
	    robot.body.neck.head.ExpFear(_e_tmp[1]*3,_time);
	  };
	  case "fearful": { // same as fear
	    robot.body.neck.head.ExpFear(_e_tmp[1]*3,_time);
	  };
	  case "bored": {
	    robot.body.neck.head.ExpDisgust(_e_tmp[1]*3,_time);
	  };
	  case "annoyed": {  // same as bored
	    robot.body.neck.head.ExpDisgust(_e_tmp[1]*3,_time);
	  };
	  case "surprise": {
	    robot.body.neck.head.ExpSuprise(_e_tmp[1]*3,_time);
	  };
	  case "angry": {
	    robot.body.neck.head.ExpAngry(_e_tmp[1]*3,_time);
	  };
	  case "neutral": {
	    robot.body.neck.head.ExpNormal(_time);
	  };
	  case "concentrated": { // same as neutral
	    robot.body.neck.head.ExpNormal(_time);
	  };
	};
  };
  
  
  function b_RBehaveHappy(){
    {
      robot.body.neck.head.BehaveJoy(10,1);
    } & {
      robot.body.neck.head.MoveLeft(3,0.5);
      robot.body.neck.head.MoveRight(2,0.3);
      robot.body.neck.head.MoveLeft(2,0.2);
      robot.body.neck.head.MoveRight(3,0.5);
      robot.body.neck.head.MoveLeft(1,0.3);
      robot.body.neck.head.MoveRight(1,0.5);
      robot.body.neck.head.MoveRight(0,0.5);
    };
  };
  
  
  function b_RBehaveSad(){
     robot.body.neck.head.BehaveSad(10,3);
  };
  
  
  function b_RBehaveFear(){
    robot.body.neck.head.BehaveFear(10,3);
  };
  
  
  function b_RBehaveDisgust() {
    robot.body.neck.head.BehaveDisgust(10,3);
  };
  
  
  function b_RBehaveSurprise() {
    robot.body.neck.head.BehaveSurprise(10,3);
  };
  
  
  function b_RBehaveAngry() {
    robot.body.neck.head.BehaveAngry(10,3);
  };
  
  
  function b_RBehaveNormal() {
    robot.body.neck.head.BehaveNormal(1);
  };
 
  /////////////////////////////////////////////////////////
  //	B A S I C
  /////////////////////////////////////////////////////////
   
   
  function b_RIntroduce(){
          
    var _error = false;
    if (!robot.hasLocalSlot("dialogue")) {
      echo("ERROR: No dialogue component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    robot.dialogue.language = 1;
    
    robot.competency.BehaveNormal(),
    robot.dialogue.Say(robot.dialogue.speech_sequences[410][robot.dialogue.language],false);
    robot.dialogue.Say(robot.dialogue.speech_sequences[411+2.random][robot.dialogue.language],false);

  };
  
   
  function b_IntroduceMore()
  {
        
    var _error = false;
    if (!robot.hasLocalSlot("dialogue")) {
      echo("ERROR: No dialogue component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    robot.dialogue.language = 1;
    
    robot.competency.BehaveNormal(),
    robot.dialogue.Say(robot.dialogue.speech_sequences[413][robot.dialogue.language],false);
    robot.dialogue.Say(robot.dialogue.speech_sequences[414][robot.dialogue.language],false);
    robot.dialogue.Say(robot.dialogue.speech_sequences[415][robot.dialogue.language],false);
    robot.dialogue.Say(robot.dialogue.speech_sequences[416][robot.dialogue.language],false);
    robot.dialogue.Say(robot.dialogue.speech_sequences[417][robot.dialogue.language],false);
    robot.dialogue.Say(robot.dialogue.speech_sequences[418][robot.dialogue.language],false);
    robot.dialogue.Say(robot.dialogue.speech_sequences[419][robot.dialogue.language],false);
    robot.dialogue.Say(robot.dialogue.speech_sequences[420][robot.dialogue.language],false);
    robot.dialogue.Say(robot.dialogue.speech_sequences[421][robot.dialogue.language],false);
  };
  
  
  function b_RShowEmotions(){
  
      
    var _error = false;
    if (!robot.hasLocalSlot("dialogue")) {
      echo("ERROR: No dialogue component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    
    // INTRODUCE
    robot.competency.BehaveNormal(),
    robot.dialogue.Say(robot.dialogue.speech_sequences[380+3.random][robot.dialogue.language],false);
    // HAPPY
    robot.dialogue.SetEmotion("happy",10);
    robot.dialogue.Say(robot.dialogue.speech_sequences[383+3.random][robot.dialogue.language] + " " + robot.dialogue.speech_sequences[391][robot.dialogue.language] +".",false)&
    robot.competency.BehaveNormal();
    robot.competency.BehaveHappy();
    // SAD
    robot.dialogue.SetEmotion("sad",10);
    robot.dialogue.Say(robot.dialogue.speech_sequences[383+3.random][robot.dialogue.language] + " " + robot.dialogue.speech_sequences[392][robot.dialogue.language] +".",false)&
    robot.competency.BehaveNormal();
    robot.competency.BehaveSad();
    // FEAR
    robot.dialogue.SetEmotion("fear",10);
    robot.dialogue.Say(robot.dialogue.speech_sequences[383+3.random][robot.dialogue.language] + " " + robot.dialogue.speech_sequences[393][robot.dialogue.language] +".",false)&
    robot.competency.BehaveNormal();
    robot.competency.BehaveFear();
    // DISGUST
    robot.dialogue.SetEmotion("disgust",10);
    robot.dialogue.Say(robot.dialogue.speech_sequences[383+3.random][robot.dialogue.language] + " " + robot.dialogue.speech_sequences[394][robot.dialogue.language] +".",false)&
    robot.competency.BehaveNormal();
    robot.competency.BehaveDisgust();
    // SURPRISE
    robot.dialogue.SetEmotion("surprise",10);
    robot.dialogue.Say(robot.dialogue.speech_sequences[383+3.random][robot.dialogue.language] + " " + robot.dialogue.speech_sequences[395][robot.dialogue.language] +".",false)&
    robot.competency.BehaveNormal();
    robot.competency.BehaveSurprise();
    // ANGRY
    robot.dialogue.SetEmotion("angry",10);
    robot.dialogue.Say(robot.dialogue.speech_sequences[383+3.random][robot.dialogue.language] + " " + robot.dialogue.speech_sequences[396][robot.dialogue.language] +".",false)&
    robot.competency.BehaveNormal();
    robot.competency.BehaveAngry();
    robot.competency.BehaveNormal();
    // END
    robot.dialogue.SetEmotion("neutral",0);
    robot.competency.BehaveNormal();
    robot.dialogue.Say(robot.dialogue.speech_sequences[386+4.random][robot.dialogue.language],false);	
  };
  
  /////////////////////////////////////////////////////////
  //	T A K E   P H O T O,    R E C O R D   V O I C E
  /////////////////////////////////////////////////////////
   

  function b_RTakePhoto(file_name){
      
    
    var _error = false;
    if (!robot.hasLocalSlot("audio")) {
      echo("ERROR: No audio component in the robot structure!");
      _error = true;
    };
    if (!robot.hasLocalSlot("video")) {
      echo("ERROR: No video component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!robot.video.hasLocalSlot("photo")) {
      echo("ERROR: No photo component in the robot structure!");
      _error = true;
    };
    
    if (!robot.audio.hasLocalSlot("player")) {
      echo("ERROR: No player component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    robot.audio.player.Play(_uFilesDir+"sounds/samples/shutter.wav"),
    robot.video.photo.Take("kinect");
    robot.video.photo.Save(file_name);
  };
 
  function b_RRecordVoice(file_name){
    
    var _error = false;
    if (!robot.hasLocalSlot("audio")) {
      echo("ERROR: No audio component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!robot.audio.hasLocalSlot("recorder")) {
      echo("ERROR: No recorder component in the robot structure!");
      _error = true;
    };
    
    if (!robot.audio.hasLocalSlot("detector")) {
      echo("ERROR: No detector component in the robot structure!");
      _error = true;
    };
    
    if (!robot.audio.hasLocalSlot("player")) {
      echo("ERROR: No player component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    
    var ret = false;
    robot.audio.player.Play(_uFilesDir+"sounds/samples/short_one_beep.wav"),
    robot.audio.recorder.Start(1,file_name+".wav"); 
    //
    //sleep(3s);
    at ((robot.audio.detector.sourceConfidence<0.3)~2s) ret = true,
    waituntil(ret);
    //
    
    robot.audio.player.Play(_uFilesDir+"sounds/samples/short_double_beep.wav");
    robot.audio.recorder.Stop();
    sleep(100ms);
    robot.audio.converter.Convert(file_name+".wav",file_name+".mp3",16000,128);
    return;
  }; 
  
  function b_RWaitForSilent() {
    var ret = false;
    at ((robot.audio.detector.sourceConfidence<0.3)~2s) ret = true,
    waituntil(ret);
    return "silent";
  };
 
  function b_RRecordStart(file_name){
    
    var _error = false;
    if (!robot.hasLocalSlot("audio")) {
      echo("ERROR: No audio component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!robot.audio.hasLocalSlot("recorder")) {
      echo("ERROR: No recorder component in the robot structure!");
      _error = true;
    };
    
    
    if (!robot.audio.hasLocalSlot("player")) {
      echo("ERROR: No player component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    
    var ret = false;
    robot.audio.player.Play(_uFilesDir+"sounds/samples/short_one_beep.wav"),
    robot.audio.recorder.Start(1,file_name+".wav"); 
    return;
  }; 
  
   
 
  function b_RRecordStop(file_name){
    
    var _error = false;
    if (!robot.hasLocalSlot("audio")) {
      echo("ERROR: No audio component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    if (!robot.audio.hasLocalSlot("recorder")) {
      echo("ERROR: No recorder component in the robot structure!");
      _error = true;
    };
    
    
    if (!robot.audio.hasLocalSlot("player")) {
      echo("ERROR: No player component in the robot structure!");
      _error = true;
    };
    
    if (_error) return;
    
    //
    robot.audio.player.Play(_uFilesDir+"sounds/samples/short_double_beep.wav");
    robot.audio.recorder.Stop();
    sleep(100ms);
    robot.audio.converter.Convert(file_name+".wav",file_name+".mp3",16000,128);
    return;
  }; 
  
  function b_RStop(){
  
    if (robot.hasLocalSlot("audio")) {
      robot.audio.Stop;
      if (robot.audio.hasLocalSlot("musicPlayer")) robot.audio.musicPlayer.Stop;
      if (robot.audio.hasLocalSlot("player")) robot.audio.player.Stop;
      if (robot.audio.hasLocalSlot("record")) robot.audio.record.Stop;
      if (robot.audio.hasLocalSlot("recognition")) robot.audio.recognition.pause=true;
    };
    if (robot.hasLocalSlot("video")) {
      robot.video.Stop;
      if (robot.video.hasLocalSlot("humanDetector")) robot.video.humanDetector.faceTrackingPause=true;
    };
    
    robot.body.neck.head.Stop;
  };
  


  echo("OK: FLASH behaviours added.");

};
