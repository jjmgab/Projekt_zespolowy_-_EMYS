/*
 * MyBehaviour: Main graph implementation.
 *
 * Load this file in your server to run the graph.
 *
 * Created: czw. 12. kwi 09:46:43 2018
 *      by: Gostai Studio 2.7
 *
 * WARNING! All changes made in this file will be lost!
 */


// Load urbiscript file.
load("urbi/fsm.u");

//#line 16 "MyBehaviourGostai Studio 2.7"

/*************************
 * Create the root state *
 *************************/

//Clean previous code
if (hasLocalSlot("_root_MyBehaviour_1"))
  if (Object.hasLocalSlot("removeLocalSlot"))
    removeLocalSlot("_root_MyBehaviour_1")
  else
    removeSlot("_root_MyBehaviour_1");

var _root_MyBehaviour_1 = fsm.State.new("_root_MyBehaviour_1");
_root_MyBehaviour_1.'$params_dict' = Dictionary.new();
var _root_MyBehaviour_1._nodes_ = Object.new;

/**********************
 * States declaration *
 **********************/

//START state declaration
var _root_MyBehaviour_1._nodes_.START = fsm.State.create_("_root_MyBehaviour_1._nodes_.START", _root_MyBehaviour_1,
function() {
//#push 1 "START"
//////////////////////////////////////////////////////////////// 
  //
  //    P O L I S H
  //
  ////////////////////////////////////////////////////////////////
  //
  // Polish UTF-8 chars - just for quick reference
  //
  // a	\xc4\x85  A  \xc4\x84
  // c	\xc4\x87  C  \xc4\x86
  // e	\xc4\x99	E  \xc4\x98
  // l	\xc5\x82 	L  \xc5\x81
  // n	\xc5\x84 	N  \xc5\x83
  // o	\xc3\xb3	O  \xc3\x93
  // s	\xc5\x9b	S  \xc5\x9a
  // z,	\xc5\xba	Z, \xc5\xb9
  // z.	\xc5\xbc	Z. \xc5\xbb
	

if (!hasSlot("trans")) var Global.trans = "";

if (!hasSlot("counter")) var Global.counter = 0;
//#pop
}
, true
, 3
, function() {
//#push 1 "START.enter"
//Code executed before entering the node

//#pop
}
, function() {
//#push 1 "START.leave"
//Code executed after leaving the node

//#pop
}, false, [11.759, 153.37]);

//Unnamed state declaration
var _root_MyBehaviour_1._nodes_.Unnamed = fsm.State.create_("_root_MyBehaviour_1._nodes_.Unnamed", _root_MyBehaviour_1,
function() {
//#push 1 "Unnamed"
t:{
	robot.video.Run,
	robot.audio.Run,
},


g:robot.competency.ActAlive(true),

//#pop
}
, false
, 4
, function() {
//#push 1 "Unnamed.enter"
//Code executed before entering the node

//#pop
}
, function() {
//#push 1 "Unnamed.leave"
//Code executed after leaving the node

//#pop
}, false, [338.067, 217.472]);

//Waiting state declaration
var _root_MyBehaviour_1._nodes_.Waiting = fsm.State.create_("_root_MyBehaviour_1._nodes_.Waiting", _root_MyBehaviour_1._nodes_.Unnamed,
function() {
//#push 1 "Waiting"
echo("Waiting...");

waituntil(robot.competency.WaitForCall())|
Global.trans="found";

//#pop
}
, true
, 5
, function() {
//#push 1 "Waiting.enter"
//Code executed before entering the node
Global.trans = "";
//#pop
}
, function() {
//#push 1 "Waiting.leave"
//Code executed after leaving the node

//#pop
}, false, [-126.208, -15.184]);

//Compliment state declaration
var _root_MyBehaviour_1._nodes_.Compliment = fsm.State.create_("_root_MyBehaviour_1._nodes_.Compliment", _root_MyBehaviour_1._nodes_.Unnamed,
function() {
//#push 1 "Compliment"
robot.body.neck.head.Say("Jeste\xc5\x9b bardzo przystojny", 4, 0);


//#pop
}
, false
, 6
, function() {
//#push 1 "Compliment.enter"
//Code executed before entering the node

//#pop
}
, function() {
//#push 1 "Compliment.leave"
//Code executed after leaving the node

//#pop
}, false, [50.698, 88.3117]);

//Called state declaration
var _root_MyBehaviour_1._nodes_.Called = fsm.State.create_("_root_MyBehaviour_1._nodes_.Called", _root_MyBehaviour_1._nodes_.Unnamed,
function() {
//#push 1 "Called"
var ret = robot.competency.AskForBasic("Co tam?");
echo(ret);
if (ret=="COMPLIMENT")
{
	Global.trans = "next";
}
else
{	
	robot.body.neck.head.Say("okej", 4, 0);
	Global.trans = "back";
};
//#pop
}
, false
, 7
, function() {
//#push 1 "Called.enter"
//Code executed before entering the node

//#pop
}
, function() {
//#push 1 "Called.leave"
//Code executed after leaving the node

//#pop
}, false, [95.3104, -102.758]);

/***************************
 * Transitions declaration *
 ***************************/
fsm.Transition.create_(_root_MyBehaviour_1._nodes_.Unnamed, _root_MyBehaviour_1._nodes_.Waiting, _root_MyBehaviour_1._nodes_.Called, "Global.trans == \"found\"", "_root_MyBehaviour_1._nodes_.Transition_2");
fsm.Transition.create_(_root_MyBehaviour_1._nodes_.Unnamed, _root_MyBehaviour_1._nodes_.Compliment, _root_MyBehaviour_1._nodes_.Waiting, "done?", "_root_MyBehaviour_1._nodes_.Transition_3");
fsm.Transition.create_(_root_MyBehaviour_1._nodes_.Unnamed, _root_MyBehaviour_1._nodes_.Called, _root_MyBehaviour_1._nodes_.Waiting, "Global.trans == \"back\"", "_root_MyBehaviour_1._nodes_.Transition_4");
fsm.Transition.create_(_root_MyBehaviour_1._nodes_.Unnamed, _root_MyBehaviour_1._nodes_.Called, _root_MyBehaviour_1._nodes_.Compliment, "Global.trans == \"next\"", "_root_MyBehaviour_1._nodes_.Transition_5");
fsm.Transition.create_(_root_MyBehaviour_1, _root_MyBehaviour_1._nodes_.START, _root_MyBehaviour_1._nodes_.Unnamed, "done?", "_root_MyBehaviour_1._nodes_.Transition");


var _root_MyBehaviour_1.enterChan = Channel.new("enteringNode");
var _root_MyBehaviour_1.enterChan.lobby = getSlot("lobby");
at(_root_MyBehaviour_1.enteringNode?(var id)) _root_MyBehaviour_1.enterChan << ["_root_MyBehaviour_1", id.name];
var _root_MyBehaviour_1.leaveChan = Channel.new("leavingNode");
var _root_MyBehaviour_1.leaveChan.lobby = getSlot("lobby");
at(_root_MyBehaviour_1.leavingNode?(var id)) _root_MyBehaviour_1.leaveChan << ["_root_MyBehaviour_1", id.name];
var _root_MyBehaviour_1.transitingChan = Channel.new("transiting");
var _root_MyBehaviour_1.transitingChan.lobby = getSlot("lobby");
at(_root_MyBehaviour_1.transiting?(var node, var trans)) _root_MyBehaviour_1.transitingChan << ["_root_MyBehaviour_1", trans.name];
var _root_MyBehaviour_1.freezeChan = Channel.new("frozen");
var _root_MyBehaviour_1.freezeChan.lobby = getSlot("lobby");
at(_root_MyBehaviour_1.graphFrozen?()) _root_MyBehaviour_1.freezeChan << "_root_MyBehaviour_1";
// Start code.
detach(_root_MyBehaviour_1.enter_());

// End of graph implementation `_root_MyBehaviour_1'.
